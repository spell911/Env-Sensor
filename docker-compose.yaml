---
  version: '3'
  x-airflow-common:
    &airflow-common
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.1.0}
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
      AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
  
  services:
    postgres:
      image: postgres:13
      environment:
        POSTGRES_USER: airflow
        POSTGRES_PASSWORD: airflow
        POSTGRES_DB: airflow
      volumes:
        - postgres-db-volume:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "airflow"]
        interval: 5s
        retries: 5
      restart: always
  
    redis:
      image: redis:latest
      ports:
        - 6379:6379
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 30s
        retries: 50
      restart: always
  
    airflow-webserver:
      <<: *airflow-common
      command: webserver
      ports:
        - 8080:8080
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always
  
    airflow-scheduler:
      <<: *airflow-common
      command: scheduler
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always
  
    airflow-worker:
      <<: *airflow-common
      command: celery worker
      healthcheck:
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always
  
    airflow-init:
      <<: *airflow-common
      command: version
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_UPGRADE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  
    flower:
      <<: *airflow-common
      command: celery flower
      ports:
        - 5555:5555
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
        interval: 10s
        timeout: 10s
        retries: 5
      restart: always

    zookeeper:
      restart: always
      image: wurstmeister/zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
  
    kafka:
      restart: always
      image: wurstmeister/kafka
      container_name: kafka
      ports:
        - "9092:9092"
      environment:
        KAFKA_CREATE_TOPICS: "device_00:1:1, device_1c:1:1, device_b8:1:1"
        KAFKA_ADVERTISED_HOST_NAME: localhost
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LOG_RETENTION_MS: 600000
        KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
  
    db:
      restart: always
      image: postgres
      container_name: postgres-env-sensor
      ports:
        - "5432:5432"
      environment:
        POSTGRES_DB: "env_sensor"
        POSTGRES_PASSWORD: "123456"
      volumes:
        - postgres-db-volume-env-sensor:/var/lib/postgresql/data
        - ./db/sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
  
    pg4:
      restart: always
      depends_on:
        - db
      image: dpage/pgadmin4
      container_name: pg4
      ports:
        - "8090:80"
      environment:
        PGADMIN_DEFAULT_EMAIL: "user@domain.com"
        PGADMIN_DEFAULT_PASSWORD: "123456"
  
    grafana:
      restart: always
      image: grafana/grafana
      container_name: grafana
      ports:
        - "3000:3000"
      volumes:
        - grafana:/var/lib/grafana

  volumes:
    postgres-db-volume:
    postgres-db-volume-env-sensor:
    grafana: